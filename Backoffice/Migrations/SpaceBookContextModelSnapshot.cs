// <auto-generated />
using System;
using Backoffice.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backoffice.Migrations
{
    [DbContext(typeof(SpaceBookContext))]
    partial class SpaceBookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backoffice.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("Date");

                    b.Property<double?>("BookingPaidAmount")
                        .HasColumnType("float");

                    b.Property<double?>("BookingPrice")
                        .HasColumnType("float");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int>("SpaceID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("SpaceID");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Backoffice.Models.BookingEquip", b =>
                {
                    b.Property<int>("BookingEquipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingEquipID"));

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentID")
                        .HasColumnType("int");

                    b.HasKey("BookingEquipID");

                    b.HasIndex("BookingID");

                    b.HasIndex("EquipmentID");

                    b.ToTable("BookingEquip", (string)null);
                });

            modelBuilder.Entity("Backoffice.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Backoffice.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentID"));

                    b.Property<int>("EquipmentAvailable")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentDesignation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentInStock")
                        .HasColumnType("int");

                    b.Property<double>("EquipmentPrice")
                        .HasColumnType("float");

                    b.HasKey("EquipmentID");

                    b.ToTable("Equipment", (string)null);
                });

            modelBuilder.Entity("Backoffice.Models.Space", b =>
                {
                    b.Property<int>("SpaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpaceID"));

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpaceCapacity")
                        .HasColumnType("int");

                    b.Property<string>("SpaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SpacePrice")
                        .HasColumnType("float");

                    b.HasKey("SpaceID");

                    b.ToTable("Space", (string)null);
                });

            modelBuilder.Entity("Backoffice.Models.Booking", b =>
                {
                    b.HasOne("Backoffice.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backoffice.Models.Space", "Space")
                        .WithMany("Bookings")
                        .HasForeignKey("SpaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Backoffice.Models.BookingEquip", b =>
                {
                    b.HasOne("Backoffice.Models.Booking", "Booking")
                        .WithMany("BookingEquips")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backoffice.Models.Equipment", "Equipment")
                        .WithMany("BookingEquips")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Backoffice.Models.Booking", b =>
                {
                    b.Navigation("BookingEquips");
                });

            modelBuilder.Entity("Backoffice.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Backoffice.Models.Equipment", b =>
                {
                    b.Navigation("BookingEquips");
                });

            modelBuilder.Entity("Backoffice.Models.Space", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
